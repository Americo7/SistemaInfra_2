---
- name: Despliegue Automatizado de RedwoodJS
  hosts: servers
  become: yes
  vars_files:
    - vars.yml

  tasks:
    # 1. Actualización del sistema
    - name: Actualizar paquetes del sistema
      apt:
        update_cache: yes
        upgrade: dist

    # 2. Instalación de dependencias base
    - name: Instalar paquetes requeridos
      apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - git
          - patch
          - build-essential
        state: present

    # 3. Configuración de NVM/Node.js
    - name: Instalar NVM
      block:
        - name: Descargar script de instalación
          get_url:
            url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh
            dest: /tmp/install_nvm.sh
            mode: '0755'

        - name: Ejecutar instalación
          shell: bash /tmp/install_nvm.sh
          args:
            creates: "/home/{{ app_user }}/.nvm/nvm.sh"
          become_user: "{{ app_user }}"

        - name: Configurar entorno
          blockinfile:
            path: "/home/{{ app_user }}/.bashrc"
            block: |
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            marker: "# {mark} ANSIBLE MANAGED BLOCK - NVM"

    # 4. Instalación de Node.js y Yarn
    - name: Configurar Node.js
      shell: |
        . ~/.nvm/nvm.sh
        nvm install {{ node_version }}
        nvm use {{ node_version }}
        corepack enable
        corepack prepare yarn@{{ yarn_version }} --activate
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        NVM_DIR: "/home/{{ app_user }}/.nvm"
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    # 5. Configuración de PostgreSQL
    - name: Configurar repositorio PostgreSQL
      block:
        - name: Añadir clave GPG
          apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
            state: present

        - name: Añadir repositorio
          apt_repository:
            repo: "deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
            state: present
            filename: pgdg

    - name: Instalar cliente PostgreSQL
      apt:
        name: "postgresql-client-{{ postgresql_version }}"
        state: present

    # 6. Gestión del código fuente
    - name: Gestionar repositorio
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_dir }}/SistemaInfra_2"
        version: main
        force: yes
        update: yes
      become_user: "{{ app_user }}"

    - name: Configurar variables de entorno
      template:
        src: templates/env.j2
        dest: "{{ app_dir }}/SistemaInfra_2/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    # 7. Instalación de dependencias
    - name: Instalar dependencias Node.js
      shell: |
        . ~/.nvm/nvm.sh
        yarn install
      args:
        chdir: "{{ app_dir }}/SistemaInfra_2"
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    # 8. Configuración de Prisma
    - name: Generar cliente Prisma
      shell: |
        . ~/.nvm/nvm.sh
        yarn prisma generate
      args:
        chdir: "{{ app_dir }}/SistemaInfra_2"
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    # 9. Construcción de la aplicación
    - name: Construir aplicación
      shell: |
        . ~/.nvm/nvm.sh
        yarn rw build
      args:
        chdir: "{{ app_dir }}/SistemaInfra_2"
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    # 10. Configuración de PM2 con inicio automático
    - name: Instalar PM2 globalmente
      shell: |
        . ~/.nvm/nvm.sh
        npm install -g pm2
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    # Verificar y eliminar instancias existentes de api
    - name: Verificar si existe la aplicación "api" en PM2
      shell: |
        . ~/.nvm/nvm.sh
        pm2 list | grep "api" | wc -l
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      register: api_instances
      changed_when: false
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    - name: Eliminar la aplicación "api" de PM2 si existe
      shell: |
        . ~/.nvm/nvm.sh
        pm2 delete redwood-api
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"
      when: api_instances.stdout | int > 0
      ignore_errors: yes

    - name: Iniciar API con PM2
      shell: |
        . ~/.nvm/nvm.sh
        cd {{ app_dir }}/SistemaInfra_2
        pm2 start "yarn rw serve api" --name redwood-api
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    - name: Guardar configuración de procesos PM2
      shell: |
        . ~/.nvm/nvm.sh
        pm2 save
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    - name: Generar comando de startup para PM2
      shell: |
        . ~/.nvm/nvm.sh
        pm2 startup | grep "sudo env" || echo ""
      args:
        executable: /bin/bash
      register: pm2_startup_cmd
      become_user: "{{ app_user }}"
      changed_when: false
      failed_when: false
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"

    - name: Ejecutar comando de startup PM2 (si se encontró)
      shell: "{{ item }}"
      args:
        executable: /bin/bash
      with_items:
        - "{{ pm2_startup_cmd.stdout }}"
      when: pm2_startup_cmd.stdout != ""
      become: yes

    - name: Volver a guardar configuración PM2 después del startup
      shell: |
        . ~/.nvm/nvm.sh
        pm2 save
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        PATH: "/home/{{ app_user }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"
      ignore_errors: yes

    # 11. Configuración de Nginx
    - name: Instalar Nginx
      apt:
        name: nginx
        state: present
      notify: Habilitar e iniciar Nginx

    - name: Crear directorio para logs
      file:
        path: /var/log/nginx/{{ nginx_site_name }}
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Configurar sitio Nginx
      template:
        src: templates/nginx.config.j2
        dest: "/etc/nginx/sites-available/{{ nginx_site_name }}"
        owner: root
        group: root
        mode: '0644'
      notify: Recargar Nginx

    - name: Habilitar sitio
      file:
        src: "/etc/nginx/sites-available/{{ nginx_site_name }}"
        dest: "/etc/nginx/sites-enabled/{{ nginx_site_name }}"
        state: link
      notify: Recargar Nginx

    - name: Eliminar sitio por defecto
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Recargar Nginx

    - name: Verificar configuración Nginx
      command: nginx -t
      register: nginx_test
      changed_when: false
      notify: Recargar Nginx

    - name: Asegurar que Nginx se inicie automáticamente
      systemd:
        name: nginx
        enabled: yes
        state: started
      notify: Habilitar e iniciar Nginx

    - name: Ver estado de Nginx (debug)
      command: systemctl status nginx
      register: nginx_status
      changed_when: false
      failed_when: false

    - name: Mostrar estado de Nginx
      debug:
        var: nginx_status.stdout_lines

  handlers:
    - name: Habilitar e iniciar Nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Recargar Nginx
      service:
        name: nginx
        state: reloaded
      when: nginx_test is defined and nginx_test.rc == 0
